services:
  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-config.yaml:/etc/otelcol-contrib/config.yaml
    command: ['--config=/etc/otelcol-contrib/config.yaml']
    ports:
      - '4317:4317'
    networks:
      - bind-network
  camera:
    privileged: true
    container_name: "${CAMERA_HOSTNAME}"
    env_file:
      - .env.${ENV}
    expose:
      - ${CAMERA_PORT}
      - ${FILTER_PORT}
      - ${MODEL_PORT}
      - ${INTERPRETER_PORT}
      - ${CLP_PORT}
    logging:
      options:
        max-size: "10m"
        max-file: 3
    networks:
      - bind-network
    image: sui:camera
    build:
      context: ./Service
      dockerfile: ./Camera/dockerfile
    develop:
      watch:
        - action: rebuild
          path: ./Camera
    command: [  "python", "-u","camera_server.py",
                "--type", "USB",
                # "--source", "/src/calibration/video2.webm",
                ]
    #devices:
    #  - "/dev/video0:/dev/video0"
    volumes:
      - /dev:/dev
      # - ./Service/Camera/calibration:/service/src/calibration
      # - ./Service/Camera/src/camera_service.py:/src/camera_service.py
    ports:
      - ${CAMERA_PORT}:50051
      
  object_detection:
    privileged: true
    container_name: "${DARK_HOSTNAME}"
    env_file:
      - .env.${ENV}
    expose:
      - ${CAMERA_PORT}
      - ${FILTER_PORT}
      - ${MODEL_PORT}
      - ${INTERPRETER_PORT}
      - ${CLP_PORT}
    logging:
      options:
        max-size: "10m"
        max-file: 3
    networks:
     - bind-network
    image: sui:object_detection
    build:
      context: ./Service
      dockerfile: ./ObjectDetection/dockerfile
    develop:
      watch:
        - action: rebuild
          path: ./ObjectDetection
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: [  "python3", "-u","ObjectDetection_server.py",
                "--cfg", "/dark/dark.cfg",
                "--names", "/dark/dark.names",
                "--weights", "/dark/dark.weights"
    ]
    volumes:
      - ./Service/ObjectDetection/model/model.cfg:/dark/dark.cfg
      - ./Service/ObjectDetection/model/model.names:/dark/dark.names
      - ./Service/ObjectDetection/model/model_best.weights:/dark/dark.weights
      # - "$HOME/.Xauthority:/root/.Xauthority:rw"
      - /tmp/.X11-unix:/tmp/.X11-unix
    ports:
      - ${MODEL_PORT}:50051
  
  object_positioning:
    container_name: "${INTERPRETER_HOSTNAME}"
    env_file:
      - .env.${ENV}
    expose:
      - ${CAMERA_PORT}
      - ${FILTER_PORT}
      - ${MODEL_PORT}
      - ${INTERPRETER_PORT}
      - ${CLP_PORT}
    logging:
      options:
        max-size: "10m"
        max-file: 3
    networks:
      - bind-network
    image: sui:object_positioning
    build:
      context: ./Service
      dockerfile: ./ObjectPositioning/dockerfile
    develop:
      watch:
        - action: rebuild
          path: ./ObjectPositioning
    command: [  "python", "-u","ObjectPositioning_server.py",
                "--working_plane",
                "--marker_type","DICT_4X4_1000",
                "--board_shape_width","14",
                "--board_shape_height","10",
                "--square_size","20",
                "--marker_size","15",
                "--id_offset","100",
    ]
    volumes:
      - ./Service/Camera/calibration:/service/src/calibration
    ports:
      - ${INTERPRETER_PORT}:50051

networks: 
  bind-network:
    driver: bridge
